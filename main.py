import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext

logging.basicConfig(level=logging.INFO)

TOKEN = '7504968431:AAFeZa45QN4Y5faP0EgUfLc8BvCBXnCEmZc'  # –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –¢–æ–≤–∞—Ä—ã –¥–ª—è —Å—Ç—Ä–æ–π–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
products = {
    '–¶–µ–º–µ–Ω—Ç—ã –∏ —Å–º–µ—Å–∏': {
        '–¶–µ–º–µ–Ω—Ç—ã': [
            {'name': '–¶–µ–º–µ–Ω—Ç –ú500', 'price': 320, 'photo': 'https://example.com/cement_m500.jpg'},
            {'name': '–¶–µ–º–µ–Ω—Ç –ú400', 'price': 280, 'photo': 'https://example.com/cement_m400.jpg'},
        ],
        '–°—É—Ö–∏–µ —Å–º–µ—Å–∏': [
            {'name': '–®—Ç—É–∫–∞—Ç—É—Ä–∫–∞ –≥–∏–ø—Å–æ–≤–∞—è', 'price': 260, 'photo': 'https://example.com/plaster_gypsum.jpg'},
            {'name': '–®—Ç—É–∫–∞—Ç—É—Ä–∫–∞ —Ü–µ–º–µ–Ω—Ç–Ω–∞—è', 'price': 240, 'photo': 'https://example.com/plaster_cement.jpg'},
        ]
    },
    '–ö—Ä–∞—Å–∫–∏ –∏ –õ–∞–∫–∏': {
        '–ö—Ä–∞—Å–∫–∏': [
            {'name': '–ö—Ä–∞—Å–∫–∞ –∞–∫—Ä–∏–ª–æ–≤–∞—è –±–µ–ª–∞—è', 'price': 510, 'photo': 'https://example.com/paint_acrylic_white.jpg'},
            {'name': '–ö—Ä–∞—Å–∫–∞ –∞–∫—Ä–∏–ª–æ–≤–∞—è —Ü–≤–µ—Ç–Ω–∞—è', 'price': 550, 'photo': 'https://example.com/paint_acrylic_color.jpg'},
        ],
        '–õ–∞–∫–∏': [
            {'name': '–õ–∞–∫ –∞–∫—Ä–∏–ª–æ–≤—ã–π', 'price': 370, 'photo': 'https://example.com/lacquer_acrylic.jpg'},
            {'name': '–õ–∞–∫ –∞–ª–∫–∏–¥–Ω—ã–π', 'price': 390, 'photo': 'https://example.com/lacquer_alkyd.jpg'},
        ]
    },
    '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ': {
        '–†—É—á–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã': [
            {'name': '–ú–æ–ª–æ—Ç–æ–∫ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π', 'price': 420, 'photo': 'https://example.com/hammer.jpg'},
            {'name': '–û—Ç–≤—ë—Ä—Ç–∫–∞ –∫—Ä–µ—Å—Ç–æ–≤–∞—è', 'price': 180, 'photo': 'https://example.com/screwdriver_cross.jpg'},
        ],
        '–≠–ª–µ–∫—Ç—Ä–æ–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã': [
            {'name': '–î—Ä–µ–ª—å', 'price': 3200, 'photo': 'https://example.com/drill.jpg'},
            {'name': '–®—É—Ä—É–ø–æ–≤–µ—Ä—Ç', 'price': 2800, 'photo': 'https://example.com/screwdriver_power.jpg'},
        ]
    }
}

user_carts = {}  # user_id -> —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤

class OrderStates(StatesGroup):
    waiting_name = State()
    waiting_phone = State()
    waiting_address = State()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
def main_menu():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("–ö–∞—Ç–∞–ª–æ–≥"), KeyboardButton("–ö–æ—Ä–∑–∏–Ω–∞"))
    kb.add(KeyboardButton("–ê–∫—Ü–∏–∏"), KeyboardButton("–ü–æ–º–æ—â—å"))
    return kb

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (inline)
def category_keyboard():
    kb = InlineKeyboardMarkup(row_width=2)
    for category in products.keys():
        kb.insert(InlineKeyboardButton(text=category, callback_data=f"category_{category}"))
    kb.insert(InlineKeyboardButton(text="‚¨Ö –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
    return kb

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
def subcategory_keyboard(category):
    kb = InlineKeyboardMarkup(row_width=2)
    for subcat in products[category].keys():
        kb.insert(InlineKeyboardButton(text=subcat, callback_data=f"subcategory_{category}_{subcat}"))
    kb.insert(InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data=f"back_to_categories"))
    kb.insert(InlineKeyboardButton(text="‚¨Ö –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
    return kb

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–î–æ–±–∞–≤–∏—Ç—å"
def products_keyboard(category, subcategory):
    kb = InlineKeyboardMarkup(row_width=1)
    items = products[category][subcategory]
    for idx, item in enumerate(items):
        kb.insert(InlineKeyboardButton(text=f"{item['name']} ‚Äî {item['price']}‚ÇΩ", callback_data=f"add_{category}_{subcategory}_{idx}"))
    kb.insert(InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –∫ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data=f"back_to_subcategories_{category}"))
    kb.insert(InlineKeyboardButton(text="‚¨Ö –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
    return kb

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–æ—Ä–∑–∏–Ω—ã
def cart_keyboard(user_id):
    kb = InlineKeyboardMarkup(row_width=1)
    cart = user_carts.get(user_id, [])
    for idx, item in enumerate(cart):
        kb.insert(InlineKeyboardButton(text=f"‚ùå –£–±—Ä–∞—Ç—å {item['name']}", callback_data=f"remove_{idx}"))
    if cart:
        kb.add(InlineKeyboardButton(text="–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout"))
    kb.add(InlineKeyboardButton(text="‚¨Ö –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
    return kb

# –°—Ç–∞—Ä—Ç ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    user_carts[message.from_user.id] = []
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω —Å—Ç—Ä–æ–π–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@dp.message_handler(lambda msg: msg.text in ["–ö–∞—Ç–∞–ª–æ–≥", "–ö–æ—Ä–∑–∏–Ω–∞", "–ê–∫—Ü–∏–∏", "–ü–æ–º–æ—â—å"])
async def main_menu_buttons(message: types.Message):
    user_id = message.from_user.id
    if message.text == "–ö–∞—Ç–∞–ª–æ–≥":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:", reply_markup=category_keyboard())
    elif message.text == "–ö–æ—Ä–∑–∏–Ω–∞":
        cart = user_carts.get(user_id, [])
        if not cart:
            await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", reply_markup=main_menu())
            return
        text = "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n"
        total = 0
        for item in cart:
            text += f"- {item['name']} ‚Äî {item['price']}‚ÇΩ\n"
            total += item['price']
        text += f"\n–ò—Ç–æ–≥–æ: {total}‚ÇΩ"
        await message.answer(text, reply_markup=cart_keyboard(user_id))
    elif message.text == "–ê–∫—Ü–∏–∏":
        promo_text = (
            "üî• –ê–∫—Ü–∏–∏ –∏ —Å–∫–∏–¥–∫–∏ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ:\n"
            "- –¶–µ–º–µ–Ω—Ç –ú500 ‚Äî —Å–∫–∏–¥–∫–∞ 10%\n"
            "- –õ–∞–∫–∏ ‚Äî –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ 3 –±–∞–ª–ª–æ–Ω–æ–≤, 1 –≤ –ø–æ–¥–∞—Ä–æ–∫\n"
            "- –≠–ª–µ–∫—Ç—Ä–æ–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –ø—Ä–∏ –∑–∞–∫–∞–∑–µ –æ—Ç 15000‚ÇΩ\n"
        )
        await message.answer(promo_text, reply_markup=main_menu())
    elif message.text == "–ü–æ–º–æ—â—å":
        help_text = (
            "üõ† –ú–∞–≥–∞–∑–∏–Ω —Å—Ç—Ä–æ–π–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –±–æ—Ç:\n"
            "- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤.\n"
            "- –î–æ–±–∞–≤–ª—è–π—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É.\n"
            "- –û—Ñ–æ—Ä–º–ª—è–π—Ç–µ –∑–∞–∫–∞–∑.\n"
            "- –î–ª—è —Å—Ç–∞—Ä—Ç–∞ –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start."
        )
        await message.answer(help_text, reply_markup=main_menu())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ inline callback –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
@dp.callback_query_handler(lambda c: c.data)
async def callbacks_handler(callback: types.CallbackQuery):
    data = callback.data

    if data == "main_menu":
        await callback.message.edit_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=None)
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())
        await callback.answer()

    elif data.startswith("category_"):
        category = data[len("category_"):]
        await callback.message.edit_text(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=subcategory_keyboard(category))
        await callback.answer()

    elif data.startswith("subcategory_"):
        parts = data.split("_")
        category = parts[1]
        subcategory = "_".join(parts[2:])
        await callback.message.edit_text(f"–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {subcategory}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=products_keyboard(category, subcategory))
        await callback.answer()

    elif data.startswith("add_"):
        parts = data.split("_")
        category = parts[1]
        subcategory = parts[2]
        idx = int(parts[3])
        user_id = callback.from_user.id
        item = products[category][subcategory][idx]
        user_carts.setdefault(user_id, []).append(item)
        await callback.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É: {item['name']}")
        await bot.send_photo(user_id, item['photo'], caption=f"{item['name']} ‚Äî {item['price']}‚ÇΩ")

    elif data.startswith("remove_"):
        idx = int(data.split("_")[1])
        user_id = callback.from_user.id
        cart = user_carts.get(user_id, [])
        if 0 <= idx < len(cart):
            removed = cart.pop(idx)
            await callback.answer(f"–£–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã: {removed['name']}")
        # –û–±–Ω–æ–≤–∏–º –∫–æ—Ä–∑–∏–Ω—É
        if cart:
            text = "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n"
            total = sum(item['price'] for item in cart)
            for item in cart:
                text += f"- {item['name']} ‚Äî {item['price']}‚ÇΩ\n"
            text += f"\n–ò—Ç–æ–≥–æ: {total}‚ÇΩ"
            await callback.message.edit_text(text, reply_markup=cart_keyboard(user_id))
        else:
            await callback.message.edit_text("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", reply_markup=main_menu())

    elif data == "checkout":
        user_id = callback.from_user.id
        cart = user_carts.get(user_id, [])
        if not cart:
            await callback.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!", show_alert=True)
            return
        await bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:")
        await OrderStates.waiting_name.set()
        await callback.answer()

    elif data == "back_to_categories":
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:", reply_markup=category_keyboard())
        await callback.answer()

    elif data.startswith("back_to_subcategories_"):
        category = data[len("back_to_subcategories_"):]
        await callback.message.edit_text(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=subcategory_keyboard(category))
        await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∑–∞–∫–∞–∑–∞
@dp.message_handler(state=OrderStates.waiting_name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await OrderStates.waiting_phone.set()

@dp.message_handler(state=OrderStates.waiting_phone)
async def process_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
    await OrderStates.waiting_address.set()

@dp.message_handler(state=OrderStates.waiting_address)
async def process_address(message: types.Message, state: FSMContext):
    await state.update_data(address=message.text)
    data = await state.get_data()
    user_id = message.from_user.id
    cart = user_carts.get(user_id, [])

    if not cart:
        await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞, –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=main_menu())
        await state.finish()
        return

    total = sum(item['price'] for item in cart)
    order_text = (
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑!\n\n"
        f"–ò–º—è: {data['name']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"–ê–¥—Ä–µ—Å: {data['address']}\n\n"
        f"–ó–∞–∫–∞–∑–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:\n"
    )
    for item in cart:
        order_text += f"- {item['name']} ‚Äî {item['price']}‚ÇΩ\n"
    order_text += f"\n–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: {total}‚ÇΩ"

    await message.answer(order_text, reply_markup=main_menu())
    user_carts[user_id] = []
    await state.finish()

# –û—Ç–≤–µ—Ç –Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã/—Å–æ–æ–±—â–µ–Ω–∏—è
@dp.message_handler()
async def unknown_message(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.", reply_markup=main_menu())

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
